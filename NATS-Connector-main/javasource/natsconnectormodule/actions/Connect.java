// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package natsconnectormodule.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import io.nats.client.*;
import io.nats.client.api.ServerInfo;
import natsconnectormodule.impl.ErrorListenerMendixLogging;
import natsconnectormodule.impl.Vars;
import java.time.Duration;
import static io.nats.client.support.Validator.emptyOrNullAs;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Connect extends CustomJavaAction<java.lang.String>
{
	private IMendixObject __connectionOptions;
	private natsconnectormodule.proxies.ConnectionOptions connectionOptions;

	public Connect(IContext context, IMendixObject connectionOptions)
	{
		super(context);
		this.__connectionOptions = connectionOptions;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		this.connectionOptions = this.__connectionOptions == null ? null : natsconnectormodule.proxies.ConnectionOptions.initialize(getContext(), __connectionOptions);

		// BEGIN USER CODE
		ILogNode logger = Core.getLogger(getClass().getSimpleName());

		ErrorListener el = new ErrorListenerMendixLogging();


		String optServer = emptyOrNullAs(connectionOptions.getServer(), Options.DEFAULT_URL);
		Long connectionTimeoutMillis = connectionOptions.getConnectionTimeoutMillis();
		Duration optTimeout = connectionTimeoutMillis == null || connectionTimeoutMillis < Options.DEFAULT_CONNECTION_TIMEOUT.toMillis()
			? Options.DEFAULT_CONNECTION_TIMEOUT : Duration.ofMillis(connectionTimeoutMillis);

		Options options = new Options.Builder()
			.server(optServer)
			.connectionTimeout(optTimeout)
			.errorListener(el)
			.build();

		Connection conn = Nats.connect(options);
		String connectionId = NUID.nextGlobal();
		Vars.put(connectionId, conn);
		logger.info(conn.getServerInfo());
		
		return connectionId;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Connect";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
